# icp
perform_icp: true # perform icp or not
initial_transform: [1, 0, 0, 0, 
                    0, 1, 0, 0,
                    0, 0, 1, 0,
                    0, 0, 0, 1] # use this initial transform for offline comparison
# dynamics candidate parameter
distance_threshold: 2 # distance threshold for a point to be considered change candidate
k_nearest_neighbor: 2 # number of neighbors to use for distance computation
distance_computation: "max"   # options are "min", "mean", "max", applied to result of knn search
# clustering parameter
clustering_algorithm: "hdbscan"  # valid are "dbscan" and "hdbscan"
clustering_space: "cartesian" # which coordinate space to use for clustering. "cartesian", "spherica", "spherical_scaled"
min_pts: 10 # number of points in neighborhood to be considered a cluster base point. 'dbscan' and 'hdbscan'
eps: 0.3  # distance for other points to be considered neighbors. 'dbscan' only
# visualization parameter
show_unobserved_voxels: false  # show unobserved voxels/points in distance heat map
show_outliers: true  # show unobserved voxels/points in distance heat map
color_changes: true  # color changes based on them appearing/disappearing
max_vis_dist: 4.0 # max distance for heat map color. Setting 0 uses maximum distance of distance computation
# mahalanobis distance
# std_dev: [0.035, 0, 0,
#           0, 0.004, 0,
#           0, 0, 0.065]  # phi, theta, distance
std_dev: [0.035, 0, 0,
          0, 0.035, 0,
          0, 0, 0.1]  # phi, theta, distance
spherical_transform: [0, 1, 0,
                      0, 0, 1,
                      1, 0, 0]  # transform from laser coordinate from to one that has z as laser rotation axis
use_relocalization: true
# change map filter parameter
min_overlap_ratio: 0.5
min_num_overlap: 2

classifier: {
  histogram: {
    min_val: 2, # minimum value of histogram
    n_bins: 10,   # number of bins
    bin_size: 0.8  # size of bins
  },

  probability_threshold: 0.22, # probability threshold above which to mark labels positive
  save_classifier_after_training: false,   # save the classifier to file after training
  roc_filename: "/tmp/roc_values.csv",  # where to save the roc values after testing
  point_num_error_weight: false, # weight the classification error with number of points in cluster

  rf_max_depth: 20, # maximum depth of decision tree / opencv default: 5
  rf_min_sample_ratio: 0.01,  # minimum samples required at a leaf node for it to be split
  rf_priors: [0.75, 0.25],  # prior on class label probability / opencv default: 0
  rf_calc_var_importance: true, # compute variable importance / opencv default: false
  rf_use_surrogates: true,  # use surrogate splits for missing data to compute variable importance correctly / opencv default: false
  rf_n_active_vars: 0,  # size of randomly selected subset of features. setting 0 uses sqrt(n_samples). / opencv default: 0
  rf_max_num_of_trees: 120, # maximum number of trees in forest. / opencv default: 50
  rf_accuracy: 0.01,  # sufficient accuracy. / opencv default: 0.1
  # not used in 2-class classification. need to be set regardless:
  rf_regression_accuracy: 0.0, # termination criteria for regression trees / opencv default: 0
  rf_max_categories: 10  # cluster values into k <= rf_max_categories categories. / opencv default: 10
}